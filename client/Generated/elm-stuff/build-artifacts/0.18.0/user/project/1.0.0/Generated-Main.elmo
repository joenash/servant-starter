var _user$project$Generated_Main$encodeUser = function (x) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'userName',
				_1: _elm_lang$core$Json_Encode$string(x.userName)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'userAge',
					_1: _elm_lang$core$Json_Encode$int(x.userAge)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Generated_Main$postUserAdd = function (body) {
	return _elm_lang$http$Http$request(
		{
			method: 'POST',
			headers: {ctor: '[]'},
			url: A2(
				_elm_lang$core$String$join,
				'/',
				{
					ctor: '::',
					_0: '',
					_1: {
						ctor: '::',
						_0: 'user',
						_1: {
							ctor: '::',
							_0: 'add',
							_1: {ctor: '[]'}
						}
					}
				}),
			body: _elm_lang$http$Http$jsonBody(
				_user$project$Generated_Main$encodeUser(body)),
			expect: _elm_lang$http$Http$expectJson(
				_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$int)),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _user$project$Generated_Main$User = F2(
	function (a, b) {
		return {userName: a, userAge: b};
	});
var _user$project$Generated_Main$decodeUser = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'userAge',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'userName',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Generated_Main$User)));
var _user$project$Generated_Main$getUserGetByName = function (name) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: A2(
				_elm_lang$core$String$join,
				'/',
				{
					ctor: '::',
					_0: '',
					_1: {
						ctor: '::',
						_0: 'user',
						_1: {
							ctor: '::',
							_0: 'get',
							_1: {
								ctor: '::',
								_0: _elm_lang$http$Http$encodeUri(
									_elm_lang$core$Basics$toString(name)),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectJson(
				_elm_lang$core$Json_Decode$maybe(_user$project$Generated_Main$decodeUser)),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
